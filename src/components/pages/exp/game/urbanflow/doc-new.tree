城市交通模拟器 (Project: UrbanFlow) {
  阅读指引与编排说明 {
    目标 {
      以“核心卷 + DLC 扩展卷”的方式重编排全文，合并重复内容，保持所有细节不丢失。
    }
    原则 {
      保留原有术语与接口命名；将跨章节重复的机制（如时间/调度、路口/信号、路径与机动指令、执行点Gate判据）统一至单一权威位置；
      将可选/扩展性较强的系统迁移至 DLC 卷，核心卷引用但不重复描述。
    }
    导航 {
      核心卷：项目概述 → 架构与技术栈 → 世界与地图 → 道路与路口 → 时间与调度 → 居民/车辆/需求 → 微观行为与关键机制 → 信号控制 → 事件系统 → 物理与渲染 → UI/UX → 数据契约与消息 → 性能与多尺度 → 地图与数据 → 校准与验证 → 风险与对策 → 术语表。
      DLC 卷：公共交通、停车与物流、环境与天气与能耗、电动车与充电、燃油与加油站、车辆市场、住房市场、政策与条例、市民满意度与人口动态、可视化与分析增强、模组与创意工坊、数据与复盘工作室。
    }
  }

  核心卷 {
    项目概述 {
      项目愿景 {
        构建一个可扩展、可信且有趣的城市交通模拟沙盒。玩家扮演城市规划师与交通组织者，通过编辑路网、分区与政策，观察“路网—行为—交通—环境”的反馈闭环，并以数据驱动优化城市。
      }
      核心功能 {
        建造与规划：曲线/多车道道路、自动路口几何与信号、分区与建筑块、推土/升级，所见即所得合法性校验。
        模拟与AI：居民活动与出行需求生成、A*路径+IDM/MOBIL驾驶、信号控制与事故/施工事件。
        分析与诊断：速度/流量/排队热力、路口相位利用率、OD流与等时圈、瓶颈定位与回放。
        策略与演化：限速/路权/定价/公交优先等政策试验，支持A/B对比与指标追踪。
        数据与复盘：快照/导入导出、固定随机种子、指标导出，便于教学与研究复现。
      }
      目标用户 {
        城市交通/规划爱好者与模拟游戏玩家；
        交通工程、运筹与城市计算方向的学生与研究者；
        交通管理与规划从业者（机理演示、方案沟通、教学）。
      }
    }

    架构与技术栈 {
      引擎与平台 {
        Web 平台：Canvas 2D + WebGL（可选 WebGPU）。
        线程模型：主线程(UI/渲染)、Worker(模拟/寻路)、可选 WASM 加速。
      }
      编程语言与构建 {
        TypeScript（严格类型，利于ECS与数据契约）。
        构建与开发：Vite + pnpm；Prettier；Solid.js + UnoCSS(Wind4)。
      }
      核心架构 {
        ECS：SoA/TypedArray 布局，组件热插拔，命令/事件驱动。
        数据流：UI→命令→Worker→事件/快照→UI；结构化克隆 + SharedArrayBuffer。
        空间索引：网格桶/R-Tree；分区并行与边界队列。
      }
      渲染与可视化 {
        道路/车道/车辆实例化渲染，LOD 与裁剪；
        热力/等时圈基于屏幕栅格累积；多图层与样式统一。
      }
      AI 与算法 {
        寻路：A* + 分层/地标缓存（可选 CH）。
        微观：IDM 跟驰 + MOBIL 换道 + 简化让行/冲突。
        信号：相位/阶段状态机，自适应配时入口。
      }
      并发与性能 {
        目标：UI 60 FPS；模拟 10–20 Hz。
        技术：批量更新、消息聚合节流、按屏采样与降分辨率。
      }
      持久化与配置 {
        快照导出：JSON + 二进制分块，schema 版本化。
        配置热更新：demand.config.json、策略/限速/信号方案。
      }
    }

    世界与地图系统 {
      世界尺度与坐标 {
        单位与比例: 1格=4 m；默认车道宽=3.5 m；高度单位=米。
        坐标系: World(x,y,z) / Grid(i,j,k) / Tile(tx,ty) / Lane(s, laneIdx, offset)；提供互转与拾取容差。
        参考系: 右手屏幕坐标；北向=+Y；弧度制；速度单位m/s（UI显示km/h）。
        接口: worldToGrid(), gridToWorld(), laneToWorld(s,laneIdx,offset)、nearestLane(worldPos)。
      }
      分块/瓦片与LOD {
        瓦片: 64×64格为1 tile；视野+邻域优先加载；跨线程分区=tile组。
        LOD: 几何/车辆/热力按距离降采样；远处使用抽稀车流/管道队列近似。
        空间索引: per-tile 网格桶+全局R-Tree；用于拾取、可达性与区域查询。
        缓存与失效: 路网/地块/建筑在编辑后生成差分；仅重建受影响tile。
      }
      地形与水体 {
        高度场: grid.k 支持整数层级与斜坡；坡度限制与纵坡平顺性约束（匝道≤6–8%，主线≤4–6%）。
        桥/隧: 立柱自动落点与净空校验（≥4.5 m）；隧道入口段自动加缓坡与照明标识。
        水体: 河/湖以多边形区建模；提供溢水线与积水阈值；雨天对车速/事故率/封闭有影响钩子。
        可视化: 地形等高线/坡度热图/积水图层；编辑时实时反馈越界与净空。
      }
      网格系统 {
        游戏世界的基础，所有地块和道路都基于网格进行定位和建造。
        支持高度变化，以实现立交桥、隧道等。
        吸附与对齐: 网格/角度/道路/控制点吸附；对齐参考线、等距阵列与镜像；可切换吸附强度与捕捉半径（px/米）。
        辅助约束: 轴向/等距/平行/垂直/共线约束切换；临时约束(按住修饰键)优先于全局设置。
        测量与标注: 直线距离/折线路径/曲线弧长、角度与方位、坡度与净空；区域面积/周长；可放置临时标尺与等距分段点。
        可视化提示: 实时显示吸附目标与约束图标；越界/穿越水体/净空不足高亮与数值提示。
      }
      地块系统 {
        地块类型 {
          住宅区: 产生居民人口。
          商业区: 提供购物、餐饮、娱乐场所，产生工作岗位。
          办公区/工业区: 提供大量工作岗位。
          公共设施: 公园、学校、医院等，满足居民需求。
        }
        地块属性 {
          人口/岗位容量；
          交通生成率；
          土地价值。
        }
        划区规则与相邻加成 {
          划区粒度: 笔刷/多边形选择；支持权重笔刷与强度(低/中/高)。
          相邻加成: 同类集聚提升效率与吸引力；异类互补（住宅邻近公园/学校加分，工业邻近住宅减分）。
          临街与面宽: 临主干路面宽/角口加权提升商业吸引力；背街/死胡同折减。
          合法性: 不跨水体与高陡坡；不得覆盖道路与建筑占位；支持“替换模式”在合法前提下原地替换分区类型。
        }
        可达性评分 {
          指标: 步行至公交/地铁时间、至就业/服务设施的平均最短时耗、道路通达性(节点介数/连通度)。
          算法: 多源最短路/等时圈栅格采样，按权重聚合为A=Σw_i·score_i，标准化至[0,100]。
          更新: 路网或公共交通调整触发局部重算与缓存失效；提供按tile的增量更新。
          用途: 影响土地价值、建筑评分与居民/企业选址概率；在面板与热力图层可视化。
          接口: zoning.recomputeAccessibility(area)、landValue.update(zoneIds)、getLandValueAt(pos)。
        }
        土地价值联动 {
          构成: V = V0·f(可达性, 环境, 拥堵, 设施, 治理)；各因子可配置权重与阈值。
          反馈: 影响建筑升级概率、租金/售价、人口与就业的迁入/迁出；与停车义务/配建约束联动。
          空间效应: 地标/公园正外溢；工业/噪声/事故黑点负外溢；距离按指数/高斯核衰减。
          接口: zoning.recomputeAccessibility(area)、landValue.update(zoneIds)、getLandValueAt(pos)。
        }
        土地利用的自发演化 (Spontaneous Land Use Evolution) {
          目标与动机: 在玩家划定“初始用途”的前提下，依据长期可达性与土地价值的持续高位，区域内建筑以概率自发“增密/转型”，体现形态学演化与以交通导向开发(TOD)的长期效应。
          触发与判据: 连续T_eval(例如90–180天)窗口内，可达性指数A≥A_thr 且 土地价值V≥V_thr；叠加稳定性约束(波动σ_A/σ_V低于阈值)与政策白名单(允许转型/增密的用途集合)。
          演化类型与规则: {增密: 低密→中/高密，同用途；转型: 住宅↔商住、办公↔商办、低附加值工业→仓储/混合用地}；受道路等级/临街面宽/角口/轨道站距的权重提升影响；保持连通与停车义务的可行性约束。
          时间尺度与推进: 以“月”为步进，每月按p=evolveRate(A,V,policy,邻里外溢)抽样；达到触发判据的连续月计数越长，p单调上升并设上限；演化为“建设队列”，施工期可临时降低容量/限速并触发轻度施工事件。
          约束与政策: 规划容积率/高度上限/保护区/生态红线/历史街区严格限制；可设置“增长边界/TOD圈层”调节阈值与增密上限；支持玩家锁定分区“冻结演化”。
          数据与接口: landUse.evolveTick(area|tile)、landUse.setPolicy(zoneId,{allowTypes, FSImax, heightMax, todRing})、landUse.freeze(zoneId,bool)；演化结果以差分更新建筑与用途并保持ID稳定。
          事件与可视化: evolution.scheduled/started/completed；地图叠加“增密候选热力/转型概率/施工中”图层；时间轴标注“受地铁X号线影响的站区增密”。
        }
        生命周期与活动引擎 {
          状态维度: EmploymentStatus{employed, searching, onboarding, onLeave, resigned}, TravelStatus{home, commute, businessTrip, leisureTrip}, HouseholdRole{single, couple, parent, elderCare}。
          活动类型: 通勤上班/上学、出差（多日OD/出入城）、旅行（周末/节假日跨区）、购物与办事（超市/医院/政务）、宅家（无出行）、家庭聚会、公司团建、求职/招工、入职、离职、请假、家人出车祸紧急请假。
          生成机制: 日程编排与事件注入；与出行需求联动；就业生命周期；模式选择与策略。
          接口: schedule.generateFor(residentId, horizonDays)、schedule.injectEvent(event)、employment.hire(residentId, employerId)、employment.leave(residentId, reason)。
        }
      }
      建筑块与附件系统 {
        建筑块（Block） {
          形状与尺寸: 矩形 footprint（W×H），支持旋转；未来扩展多边形/曲线外轮廓。
          分类: 道路块、公共建筑块、商业建筑块、住宅/混合用地块、装饰块、基础设施块（停车场/地面停车位）。
          属性: footprint、朝向、高度层级、入口/出入口数量与位置、可连接边、成本与维护、分区/用途标签。
          渲染分层: 建筑块独立渲染通道，实例化批处理与遮挡裁剪。
        }
        放置与合法性 {
          不可重叠；与道路关系合法；网格对齐；拆除与替换；推土机清空区域；“替换模式”合法替换类型。
        }
        连接与隐藏网络 {
          边缘连接器（Connectors）与隐藏节点/连线；
          道路自动连接与不兼容提示；
          转弯几何（视觉）自动生成，连通性独立于视觉几何。
        }
        Attach 附加系统 {
          可附着在块边/角/锚点的轻量对象（人行道、信号灯、标志、路灯、隔离栏）；
          锚点规则与生命周期；渲染批量化。
        }
        数据与接口 {
          建议组件: BlockTransform/BlockMeta/BlockConnectors/BlockOccupancy/AttachmentLink/HiddenLinkage；
          编辑与命令：placeBlock/rotateBlock/replaceBlock/bulldoze/attach/autoConnect/rebuildHiddenNetwork；
          校验器: PlacementValidator.validate。
        }
        划区自动嵌入与建筑义务 {
          住宅/商业/办公区划定后自动合成建筑组合与出入口；
          单元与户型/岗位槽/吸引力单元；
          义务与配建（停车配比/承载），不足时提示与建议；
          增量更新保持ID稳定。
        }
        居民/岗位承载与停车义务 {
          容量字段: building.capacity = {households, jobs, retailAttraction, parking: {onSite, shared, curbQuota}}；
          分配策略: 住户/岗位/车位分配优先规则与外溢；
          运行期义务与不足的影响；
          接口与事件: allocateHouseholds/allocateJobs/allocateParking 与 capacityChanged/shortageDetected。
        }

        基础 Block 原型库 {
          设计目的: 为编辑器提供可直接放置的常用原型，给出几何/连接/容量/成本的合理默认值，并与路网/行人/事件等系统解耦对齐。
          字段 Schema {
            id: 唯一字符串；
            类别: {道路块/公共建筑块/商业建筑块/基础设施块/公共空间}；
            footprint: W×H（格）；可拉伸轴: {none/W/H/both}；朝向: 0/90/180/270；
            connectors: {edge, kind{road/ped/driveway/service}, width(m), offset(格|m), dir{in/out/both}, lanes?}[]；
            sectionTemplateRef?: 引用“截面模板与车道用途”的模板Id；
            oneWay?: bool；laneCount?: number[]（双向用 [上/下行]）；v_max_kmh?: number；
            capacity?: {households?, jobs?, retailAttraction?, parking?: {onSite, shared?}}；
            service?: {pumpCount?, serviceRateVehPerMin?, staff?, responseRadiusm?}；
            cost: {build, maintain}/月；unlock?: 初始可用/需解锁条件；
            styleKey?: 样式/图标引用。
          }

          道路类 {
            水泥路·乡村1+1 {
              id: block.road.cement.rural_1p1; 类别: 道路块; footprint: 2×8; 可拉伸轴: H;
              sectionTemplateRef: 支路; oneWay: false; laneCount: [1,1]; v_max_kmh: 40;
              connectors: 四边开放 edge{kind: road, width: 6.0, dir: both};
              cost: {build: 50, maintain: 2}/格·月; styleKey: road.cement;
              放置约束: 禁止跨水体与>8%坡; 允许与“人行道”并置。
            }
            单行道·1车道 {
              id: block.road.oneway.1; 类别: 道路块; footprint: 2×8; 可拉伸轴: H;
              sectionTemplateRef: 支路; oneWay: true; laneCount: [1,0]; v_max_kmh: 40;
              connectors: 纵向两端 edge{kind: road, width: 3.5, dir: both};
              cost: {build: 60, maintain: 3}/格·月; styleKey: road.oneway1;
              放置约束: 与相邻单行方向可成对组成双行。
            }
            双行道·1+1 {
              id: block.road.twoWay.1p1; 类别: 道路块; footprint: 3×8; 可拉伸轴: H;
              sectionTemplateRef: 次干路; oneWay: false; laneCount: [1,1]; v_max_kmh: 50;
              connectors: 纵向两端 edge{kind: road, width: 7.0, dir: both};
              cost: {build: 90, maintain: 5}/格·月; styleKey: road.1p1;
            }
            四车双行道·2+2 {
              id: block.road.twoWay.2p2; 类别: 道路块; footprint: 4×10; 可拉伸轴: H;
              sectionTemplateRef: 主干路; oneWay: false; laneCount: [2,2]; v_max_kmh: 60;
              connectors: 纵向两端 edge{kind: road, width: 14.0, dir: both};
              cost: {build: 140, maintain: 9}/格·月; styleKey: road.2p2;
            }
            六车双行道·3+3 {
              id: block.road.twoWay.3p3; 类别: 道路块; footprint: 6×12; 可拉伸轴: H;
              sectionTemplateRef: 快速路; oneWay: false; laneCount: [3,3]; v_max_kmh: 70;
              connectors: 纵向两端 edge{kind: road, width: 21.0, dir: both};
              cost: {build: 210, maintain: 14}/格·月; styleKey: road.3p3;
              放置约束: 弯道半径与净空按“道路曲线编辑/校验”。
            }
            人行道·4m {
              id: block.ped.sidewalk.4m; 类别: 基础设施块; footprint: 1×8; 可拉伸轴: H;
              connectors: 纵向两端 edge{kind: ped, width: 4.0, dir: both};
              cost: {build: 20, maintain: 1}/格·月; styleKey: ped.sidewalk;
              作用: 只接行人图；可与道路块并置以形成路侧人行道。
            }
          }

          设施与服务类 {
            停车场·小型 {
              id: block.parking.lot.small; 类别: 基础设施块; footprint: 6×8; 朝向: 0/90;
              connectors: 车行出入口×1 edge{kind: driveway, width: 6.0, dir: both}, 行人入口×2 edge{kind: ped, width: 3.0};
              capacity: {parking: {onSite: 30}}; cost: {build: 1200, maintain: 35}/月; styleKey: facility.parking.small;
              放置约束: 出入口需贴邻道路边；与“居民/岗位承载与停车义务”联动。
            }
            加油站·小型 {
              id: block.fuel.station.small; 类别: 基础设施块; footprint: 10×8; 朝向: 0/90;
              connectors: 车行出入口×2 edge{kind: driveway, width: 7.0, dir: in/out};
              service: {pumpCount: 4, serviceRateVehPerMin: 1.2}; cost: {build: 6000, maintain: 120}/月; styleKey: facility.fuel.small;
              放置约束: 禁止紧邻学校/医院≤2格；出入口不得直连高速类道路。
            }
            便利店·小型 {
              id: block.retail.cstore.small; 类别: 商业建筑块; footprint: 4×4; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 2.0}, 车行临停位×2 edge{kind: driveway, width: 3.0};
              capacity: {jobs: 6, retailAttraction: 1.0, parking: {onSite: 4}}; cost: {build: 1600, maintain: 45}/月; styleKey: retail.cstore;
            }
          }

          公共空间类 {
            公园·口袋公园 {
              id: block.park.pocket; 类别: 公共空间; footprint: 8×8; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 4.0};
              capacity: {retailAttraction: 0.6}; cost: {build: 1800, maintain: 20}/月; styleKey: park.pocket;
              影响: 附近住宅土地价值小幅↑；噪声↓；可达性加权。
            }
          }

          安全与执法类 {
            公安局·小型派出所 {
              id: block.police.station.small; 类别: 公共建筑块; footprint: 6×5; 朝向: 任意;
              connectors: 车行出入口×1 edge{kind: driveway, width: 6.0}, 行人入口×1 edge{kind: ped, width: 3.0};
              capacity: {jobs: 24, parking: {onSite: 6}}; service: {staff: 20, responseRadiusm: 800};
              cost: {build: 9000, maintain: 260}/月; styleKey: civic.police.small;
              联动: 作为“事件系统/资源池”的警车驻点，提供 unitKind=Police 的 spawn 与响应缩短。
            }
          }

          住宅与办公类 {
            低密住宅·联排 {
              id: block.residential.rowhouse.low; 类别: 住宅建筑块; footprint: 6×6; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 2.0}, 车行出入口×1 edge{kind: driveway, width: 4.5};
              capacity: {households: 12, parking: {onSite: 6}}; cost: {build: 3200, maintain: 55}/月; styleKey: res.rowhouse.low;
            }
            中密住宅·小高层 {
              id: block.residential.midrise; 类别: 住宅建筑块; footprint: 8×10; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 6.0};
              capacity: {households: 60, parking: {onSite: 30}}; cost: {build: 12000, maintain: 220}/月; styleKey: res.midrise;
            }
            高密住宅·塔楼 {
              id: block.residential.tower; 类别: 住宅建筑块; footprint: 8×12; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 6.0};
              capacity: {households: 120, parking: {onSite: 60}}; cost: {build: 24000, maintain: 450}/月; styleKey: res.tower;
            }
            办公楼·中型 {
              id: block.office.mid; 类别: 办公建筑块; footprint: 8×10; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 6.0};
              capacity: {jobs: 200, parking: {onSite: 40}}; cost: {build: 18000, maintain: 400}/月; styleKey: office.mid;
            }
          }

          教育与医疗类 {
            小学·标准校 {
              id: block.educ.school.primary; 类别: 公共建筑块; footprint: 10×12; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 4.0}, 校车落客区×1 edge{kind: driveway, width: 6.0};
              capacity: {jobs: 80, parking: {onSite: 20}}; service: {studentCapacity: 800, bellTimes: ["07:50","16:30"]};
              cost: {build: 26000, maintain: 600}/月; styleKey: civic.school.primary;
              影响: 上下学时段周边行人与车流短时上升。
            }
            社区诊所·基层医疗 {
              id: block.health.clinic.community; 类别: 公共建筑块; footprint: 6×6; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 5.0};
              capacity: {jobs: 30, parking: {onSite: 6}}; service: {patientCapacityPerHour: 30};
              cost: {build: 9000, maintain: 220}/月; styleKey: health.clinic.community;
            }
            综合医院·区域级 {
              id: block.health.hospital.general; 类别: 公共建筑块; footprint: 14×16; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 4.0}, 急救车出入口×2 edge{kind: driveway, width: 6.0, dir: in/out};
              capacity: {jobs: 320, parking: {onSite: 120}}; service: {bedCount: 200, ambulanceSlots: 2, responseRadiusm: 1200};
              cost: {build: 120000, maintain: 2800}/月; styleKey: health.hospital.general;
              联动: 作为“事件系统/资源池”的救护车驻点，unitKind=Ambulance。
            }
          }

          工业与仓储类 {
            仓库·小型配送中心 {
              id: block.ind.warehouse.small; 类别: 仓储建筑块; footprint: 10×12; 朝向: 任意;
              connectors: 货运月台×2 edge{kind: service, width: 8.0}, 车行出入口×1 edge{kind: driveway, width: 7.0};
              capacity: {jobs: 25, parking: {onSite: 10}}; service: {dockSlots: 2}; cost: {build: 16000, maintain: 280}/月; styleKey: ind.warehouse.small;
            }
            轻工业厂房·小型 {
              id: block.ind.light.small; 类别: 工业建筑块; footprint: 12×12; 朝向: 任意;
              connectors: 车行出入口×2 edge{kind: driveway, width: 7.0};
              capacity: {jobs: 60, parking: {onSite: 20}}; cost: {build: 22000, maintain: 420}/月; styleKey: ind.light.small;
            }
            最后一公里配送站 {
              id: block.logistics.depot.lastmile; 类别: 仓储建筑块; footprint: 8×10; 朝向: 任意;
              connectors: 车行出入口×2 edge{kind: driveway, width: 6.0};
              capacity: {jobs: 40, parking: {onSite: 12}}; service: {vanSlots: 8, dispatchRateVehPerMin: 0.4}; cost: {build: 14000, maintain: 320}/月; styleKey: logistics.depot.lastmile;
            }
          }

          商业与娱乐类 {
            超市·中型 {
              id: block.retail.supermarket.mid; 类别: 商业建筑块; footprint: 10×10; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 7.0};
              capacity: {jobs: 40, retailAttraction: 3.0, parking: {onSite: 50}}; cost: {build: 26000, maintain: 520}/月; styleKey: retail.supermarket.mid;
            }
            餐馆·街角店 {
              id: block.retail.restaurant.corner; 类别: 商业建筑块; footprint: 4×4; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 2.0};
              capacity: {jobs: 10, retailAttraction: 1.2, parking: {onSite: 0}}; cost: {build: 6000, maintain: 160}/月; styleKey: retail.restaurant.corner;
            }
            影院·小型 {
              id: block.entertain.cinema.small; 类别: 商业建筑块; footprint: 10×8; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0}, 车行出入口×1 edge{kind: driveway, width: 6.0};
              capacity: {jobs: 25, retailAttraction: 2.0, parking: {onSite: 30}}; cost: {build: 38000, maintain: 700}/月; styleKey: entertain.cinema.small;
            }
          }

          公共交通与慢行设施 {
            公交站·港湾式 {
              id: block.transit.bus.bay; 类别: 基础设施块; footprint: 2×6; 可拉伸轴: H;
              connectors: 道路侧缘 edge{kind: road, width: 3.5, dir: both}, 行人入口×1 edge{kind: ped, width: 3.0};
              service: {routeSlots: 2, dwellBaseSec: 15}; cost: {build: 1800, maintain: 30}/月; styleKey: transit.bus.bay;
            }
            地铁站出入口 {
              id: block.transit.metro.entrance; 类别: 基础设施块; footprint: 2×3; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 3.0};
              service: {catchmentRadiusm: 800}; cost: {build: 12000, maintain: 90}/月; styleKey: transit.metro.entrance;
            }
            BRT中置站台·岛式 {
              id: block.transit.brt.median.island; 类别: 基础设施块; footprint: 4×10; 可拉伸轴: H;
              connectors: 行人连桥/地道 edge{kind: ped, width: 3.0};
              service: {routeSlots: 2, dwellBaseSec: 20}; cost: {build: 28000, maintain: 180}/月; styleKey: transit.brt.median;
              放置约束: 仅与“主干/快速路”中分隔配置兼容。
            }
            人行天桥 {
              id: block.ped.overpass; 类别: 基础设施块; footprint: 2×8; 可拉伸轴: H;
              connectors: 两端行人入口 edge{kind: ped, width: 3.0}; service: {clearanceM: 4.5};
              cost: {build: 16000, maintain: 60}/月; styleKey: ped.overpass;
              放置约束: 跨越道路/水体时需满足净空≥4.5 m。
            }
            人行地道 {
              id: block.ped.underpass; 类别: 基础设施块; footprint: 2×8; 可拉伸轴: H;
              connectors: 两端行人入口 edge{kind: ped, width: 3.0}; cost: {build: 14000, maintain: 70}/月; styleKey: ped.underpass;
              风险: 雨季积水概率↑，可与“环境与天气”联动触发维护事件。
            }
          }

          停车与能源增强 {
            停车楼·5层 {
              id: block.parking.garage.5f; 类别: 基础设施块; footprint: 12×12; 朝向: 任意;
              connectors: 入口×1 edge{kind: driveway, width: 7.0, dir: in}, 出口×1 edge{kind: driveway, width: 7.0, dir: out}, 行人入口×2 edge{kind: ped, width: 3.0};
              capacity: {parking: {onSite: 300}}; cost: {build: 52000, maintain: 900}/月; styleKey: facility.parking.garage5f;
            }
            充电站·快充（小型） {
              id: block.energy.ev.fast.small; 类别: 基础设施块; footprint: 8×6; 朝向: 任意;
              connectors: 车行出入口×2 edge{kind: driveway, width: 6.0};
              service: {chargerCount: 6, powerKW: 120, serviceRateVehPerMin: 0.8}; capacity: {parking: {onSite: 8}};
              cost: {build: 18000, maintain: 260}/月; styleKey: energy.ev.fast.small;
            }
            加气站·CNG（小型） {
              id: block.fuel.cng.small; 类别: 基础设施块; footprint: 10×8; 朝向: 0/90;
              connectors: 车行出入口×2 edge{kind: driveway, width: 7.0, dir: in/out};
              service: {pumpCount: 3, serviceRateVehPerMin: 1.0}; cost: {build: 42000, maintain: 140}/月; styleKey: facility.fuel.cng.small;
            }
          }

          公共空间扩展 {
            社区广场 {
              id: block.plaza.community; 类别: 公共空间; footprint: 10×10; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 4.0};
              capacity: {retailAttraction: 1.0}; cost: {build: 3200, maintain: 28}/月; styleKey: plaza.community;
            }
            绿道·线性段 {
              id: block.greenway.linear; 类别: 公共空间; footprint: 1×8; 可拉伸轴: H;
              connectors: 纵向两端 edge{kind: ped, width: 3.0}; cost: {build: 1200, maintain: 10}/月; styleKey: greenway.linear;
              作用: 提升步行/骑行可达性与环境评分；与“行人网络”耦合。
            }
          }

          市政与社区服务 {
            图书馆·社区级 {
              id: block.civic.library.community; 类别: 公共建筑块; footprint: 6×6; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 3.0};
              capacity: {jobs: 20, retailAttraction: 0.8}; cost: {build: 10000, maintain: 180}/月; styleKey: civic.library.community;
            }
            邮局·小型 {
              id: block.civic.post.office.small; 类别: 公共建筑块; footprint: 4×6; 朝向: 任意;
              connectors: 行人入口×1 edge{kind: ped, width: 2.5}, 车行出入口×1 edge{kind: driveway, width: 5.0};
              capacity: {jobs: 12, parking: {onSite: 4}}; service: {parcelSlots: 4}; cost: {build: 8000, maintain: 150}/月; styleKey: civic.post.office.small;
            }
            社区服务中心·小型 {
              id: block.civic.service.center.small; 类别: 公共建筑块; footprint: 8×8; 朝向: 任意;
              connectors: 行人入口×2 edge{kind: ped, width: 3.0};
              capacity: {jobs: 60, parking: {onSite: 10}}; cost: {build: 16000, maintain: 280}/月; styleKey: civic.service.center.small;
            }
          }

          接口与注册 {
            API: blocks.registerPrototype(proto), blocks.listByCategory(cat), placeBlock(protoId, pos, rot)；
            资源: 预制图标/样式 key 与本地化名称；成本与容量可被策略面板系数调整。
          }
        }
      }
      趣味性钩子与探索 {
        地标与景观、发现与解锁、动态挑战。
      }
    }

    道路与路口系统 {
      图结构与类型 {
        使用图论的数据结构（节点-边模型, Node-Edge Graph）。
        节点: 交叉路口、道路端点；边: 连接节点的道路，包含车道信息。
        道路类型: 单行道、双向、多车道公路、高速；属性: 限速、车道数、是否允许掉头/停车。
      }
      截面模板与车道用途 {
        模板库: {支路, 次干路, 主干路, 快速路, 高速}；字段=车道数/宽、路肩/非机动车道/人行道/中央分隔/绿化带/停车带。
        车道用途: 一般/公交专用/自行车/共享/可变/潮汐/停车带/应急；车辆类型限制与时间窗策略。
        港湾式停靠与动态/时段化；接口: applySectionTemplate/setLaneUse/setShoulder。
      }
      几何与网格/车道映射 {
        网格单位与宽度占用；连续直线段合并为单边；宽度变化/分合流处生成节点。
        曲线/样条与车道边界：中心线表示与采样、车道中心线与边界生成、视觉/模拟一致性、增量更新。
      }
      限速与容量 {
        边级限速（可时段叠加）；容量=“每车道基础容量×车道数”，受转向与信号影响。
      }
      连接与路口生成 {
        自动生成条件与直线规则；路口定义与节点ID；执行点映射（停止线/入口线绑定到入口索引）。
      }
      车道转向许可 {
        以“入口方向×车道”设置允许机动(L/T/R/U)；U形掉头约束与冲突校验。
      }
      行人设施与信号配置 {
        斑马线连通、相位模板与“路口控制”面板编辑；检测器绑定。
      }
      路口几何自动生成 {
        输入: 入口车道组、允许机动集、道路宽度/类型、限速与设计半径模板、行人过街配置。
        转角圆角与缓和: 对相邻路臂按半径R生成圆角（可选缓和曲线过渡），保证与对向/相邻边界不相交；在几何/冲突允许时自动应用。
        口袋车道: 基于转向需求与相位/限速推算设计排队长度L_storage；在净距足够时从直行道剥离形成左/右转口袋，自动绘制导流线/停止线与车道标注。
        导流岛与右转分道: 具备slip右转条件时生成三角导流岛；默认岛宽≥2 m、鼻端距停止线≥3 m；自动生成让行线与人行过街切缝。
        人行过街细节: 斑马线宽度、距停止线距离、缘石坡道位置自动布置；宽路口或设有中央分隔带时生成行人庇护岛（≥2 m），支持二次过街（两段斑马线+等待区）。
        参数与默认值: {圆角半径: 道路类型/限速映射；左转口袋长度: 25–60 m；右转口袋长度: 12–20 m；斑马线宽: 3.5–4 m；停止线退让: 3–5 m；庇护岛宽: ≥2 m}（均可配置）。
        触发与重建: 路臂连接/宽度或允许机动变更时重建路口几何；保持已编辑锚点稳定并执行最小扰动更新。
        校验与降级: 与车行-行人冲突矩阵联动；几何不可解时给出降级建议（缩短口袋、调半径/相位、取消slip右转）。
        参数接口: roadTypeTemplates.radiusMinBySpeed、pocketDefaults、islandDefaults、crosswalkDefaults；UI在“路口配置/道路曲线编辑”处可覆盖。
      }
    }

    时间与调度系统 {
      目标与体验 {
        让玩家以“小时/天/周”为节奏观察-干预-复盘，提供关键时刻减速与回放，既稳态观察也支持突发应对。
      }
      时间尺度与时钟 {
        时间比例: 1 实秒 → 0.5/1/2/5/10 游戏分钟，可在UI平滑切换；切换对齐tick边界避免抖动。
        速度档位: pause, 0.5x, 1x, 2x, 4x, 8x；编辑/告警时可触发“自动慢放”。
        单步推进: step(1 tick|N ticks|Δt)；支持断点诊断模式（冻结模拟，仅推进UI与指标回放）。
        now 结构: {date, timeOfDay[0..24), dayOfWeek(0..6), dayType(工作日/周末/节假日), season, tick, seedStreamIndices{pathing, microAI, incidents, demand}}。
      }
      Tick 与调度（统一权威定义） {
        固定步长: dt=0.25–0.5 s；拥堵/交织/事故区支持2–3级子步长以稳定放行与碰撞判定。
        守护窗: 相位切换前Δt_guard≈0.5 s冻结 Gate 判据，减少黄灯边界抖动与反复起步。
        UI节流: 指标聚合1–2 Hz、事件合并与背压；时间轴采样窗口可调(5–60 min)。
        调度阶段顺序 {
          1) 采集命令与事件：处理UI命令、封闭/施工更新与插件回调。
          2) 信号控制：控制器状态机推进，决定相位切换/延长；输出放行约束。
          3) 检测器更新：占有率/到达率/队列末端估计，平滑与滞后处理；更新可信度。
          4) 路网快照：缓存下游空间L_free、封闭/限速/工作区；生成Gate表。
          5) 换道决策：两阶段提交（先申报/再仲裁）；尊重安全/收益/冷却与相邻车道可用性。
          6) 跟驰积分：IDM推进纵向，限幅加/减速度与jerk；天气修正b_eff与t_react。
          7) 路口放行与不可达检测：基于相位/让行/Gate；计时外溢阻塞与违章候选。
          8) 碰撞/事故：低速擦碰→舒适度/动画反馈；中高速→事故事件与封闭变更。
          9) 再路由/局部绕行：对触发条件的车辆执行detour或宏观replan；必要时允许U形掉头。
          10) 生成/回收：按需求/到达/停车完成生成或回收车辆；维护SoA紧凑性。
          11) 指标聚合与上报：时耗/延误/可靠性/近失/排队等，按频率向UI推送。
        }
        并行与分区：按tile/分区并行；跨分区采用边界队列；保证同tick内只读-写局部一致性。
        背压与降级：超预算→降采样/降热力分辨率/提高dt至0.5–1.0 s/关闭非关键图层，保UI 60 FPS。
      }
      日/周/季循环与城市日历 {
        日循环: 日出/日落→光照与能见度；AM 7–9 / PM 17–19 高峰；夜间施工窗口。
        周循环: 工作日/周末曲线切换；学校作息影响家校OD与路口冲突。
        季节与月份: 白昼长度、天气概率与温度曲线；旅游/雨雪季窗口。
        城市日历: {name, start, end, scope, effects{od↑/↓, 封闭, 价格/策略时段}}；接口 calendar.add/remove/list。
      }
      时间玩法钩子与UI/UX {
        自动慢放: 事故/拥堵阈值/关键路口排队爆表/近失密度升高触发0.5x–1x，退出带回弹延迟。
        限时挑战: “48小时将平均延误降至X s/veh”“维持1小时绿波评分≥B”等。
        时段策略: 限行/拥堵费/公交优先/货车禁行按时间窗生效；支持A/B对照。
        UI: 时钟状态栏/时间轴(事件与相位标记)/快照与关键帧/“下一事件”跳转。
        命令: setTimeScale/setDateTime/pause/resume/step/jumpTo/setAutoSlowMo。
      }
      确定性与回放一致性 {
        RNG: 全局seed + counter-based子流(pathing/microAI/incidents/demand等)；记录消费计数保证重放一致性。
        可重放: 相同输入/版本/seed→逐帧一致；时间比例切换仅影响推进速率，不改变结果。
      }
      性能与背景行为 {
        背景标签页：暂停或低频推进并冻结时间，回前台后在关键帧对齐处恢复，确保一致性。
        降级阶梯：关闭后处理 → 降粒子/标线密度 → 抽稀车辆实例 → 降热力分辨率 → 降相机刷新。
      }
      插件调度接口（概览） {
        调度: scheduleAt(ts, fn), scheduleEvery(period, fn), onHour(h), onDay(type)。
        预算与超时: 每tick回调CPU预算与超时终止；事件去抖与合并；回调日志入回放。
      }
    }
    需求与 Agent 系统 {
      居民 Agent {
        目标与体验：居民“像人一样生活”，与家庭/就业/住房/车辆/购物/政策/天气/事件联动。
        数据结构与关联：Resident组件字段、关联对象、记忆/熟悉度。
        状态与行为模型：分层状态机与行为树骨架、触发源。
        活动与日程：生成/调整/群体活动与集体出行模式。
        出行与模式选择：模式集合、效用与Logit抽样、可靠性与风险、组队与拼车。
        车辆与资产决策：拥车/租车/卖车，能源补给偏好与队列阈值。
        目的地选择与学习：初选、强化、探索策略。
        情绪/满意度/习惯：mood、satisfaction向量更新、习惯形成机制。
        长期学习与习惯固化：按模式(type∈{drive, transit, walk, bike})维护“长期体验先验”与“近期可靠性移动平均”(窗口30–90天)；当某模式的准点率/拥挤度/舒适度长期劣于阈值→对应效用基线与选择概率显著下调并引入惯性/迟滞(切换成本/回弹期)；持续正向体验逐步恢复先验但设半衰期(例如60天)；支持政策与引导对惯性进行温和校正与上限夹紧。
        社交与叙事：Household与社交网络，轻叙事事件。
        违规与风险：遵章度上限与极端事件。
        接口与事件：查询/命令/事件/序列化；可视化与调试（Agent卡片、回放、性能与近似）；难度与辅助选项。
      }
      车辆 Agent {
        数据与状态：基础属性、运行状态、标志、记忆与偏好。
        生命周期与任务：生成/回收、补能/加油、载客/载货。
        宏观AI（路径与再路由）：策略/记忆/学习与冷却/车队与跟随/车辆类型偏好/API。
        微观AI（跟驰/换道/让行）：IDM+MOBIL、间隙接受、礼让与插队、预判与缓行、侧向策略、风险护罩。
        情绪/性格/情境驱动：参数映射与情境修正，趣味事件与玩家干预，成长与改装（可选）。
        可视化与调试：叠加、指标、调试快捷；数据与接口对齐（组件映射/事件/命令）。
      }
      企业 Agent {
        属性与类型：行业sector、规模size、岗位JobSlot集合、位置、健康度health∈[0,1]、库存与供应需求摘要；分类含办公室/零售/制造/仓储/服务。
        生命周期：初创→扩张→稳定→衰退→迁移/倒闭；状态转移由物流效率(交付准时率/库存周转)、客户可达性(到达时间分布)与劳动力匹配度(岗位填充率/通勤成本)共同驱动。
        经济×交通耦合：长期拥堵/封闭提高物流与通勤成本→利润空间/健康度下降；TOD/可达性改善→扩张与集聚概率上升；行业间外溢与上下游依赖施加附加权重。
        选址与搬迁：当健康度长期低于阈值或租金/土地价值不匹配时触发“搬迁候选”，按行业偏好与可达性/租金/物流节点距离择优；支持合并/分拆与从核心区外移至次级中心。
        就业与需求联动：提供JobSlot→影响居民就业/通勤OD；扩张/裁撤直接改变岗位供给与出行潮汐；工资/吸引力影响岗位匹配。
        接口与事件：business.spawn(type, zoneId)、business.expand(id, Δjobs)、business.downsize(id, Δjobs)、business.relocate(id, targetZone|pos)、business.close(id)；事件 businessCreated/expanded/downsized/relocated/closed/healthUpdated。
        可视化：企业热力(密度/健康度)、岗位变化时间线、关闭/搬迁风险提示与候选落点预览。
      }
      出行需求生成 {
        活动基础与出发时刻分布；目的地选择（重力/机会+随机效用）；
        模式划分（Logit）；分区与建筑驱动（供给与需求/生成率/时变/接口/触发）；
        活动类别与触发（通勤/出差/旅行/购物/宅家/家庭/团建/招工/入职/离职/请假/紧急）与OD生成；
        能量与资产触发（SOC/油量/租车/购车/搬家/市场反馈）与购物系统（类目/消耗模型/库存阈值/清单/门店选择/库存与补货/OD与时窗/接口/缓存与失效）；
        出行需求配置 demand.config.json 的 Schema、示例与默认参数建议；全局参数（scaling、seed）。
      }
      供应链与货运（核心极简） {
        结构：采用三层最简链条 Industrial→Warehouse→Commercial，按分区对生成“发货-收货”对，形成可预测的货运OD；支持行业权重与日/周时间窗。
        调度：以批次/车次生成Truck/Van车辆，使用与居民不同的时段分布与路径偏好；支持装卸时间、禁行/限高/限重、夜间优先与绕行；库存安全线触发加急补货。
        指标：物流效率(准时率、平均交付时耗)、库存周转、缺货率与在途量；输出给企业健康度与商业区评分作为输入。
        差异化：货运对拥堵敏感但对停车/步行成本不敏感；优先主干/环线与绕行通道；可与事件系统的占道/施工联动。
        接口与事件：logistics.planShipments(horizon)、shipmentDispatched/arrived/delayed/failed、setFreightScaling(α)；与道路封闭/限速事件联动更新代价。
        可视化：货运流向叠加(箭头/弦图简化)、时间段分层、仓储节点压力热力图。
      }
    }

    微观行为与关键机制 {
      车道级模型与队列推进 {
        车道对象: {dir, length, v_max, capacity_base, turnPermits(bitset)}。
        口袋线与排队区: 左/右转专用口袋，设计长度L_storage按需求与相位核定，外溢时抑制交织入口放行。
        冲突与合流: 冲突区间近似，入口/出口执行点约束；合流点采用间隙接受与最小安全距离。
        队列推进: 以可用空间Δx与前车状态推进，多排队列支持并行推进与交叉抑制。
      }
      路口与信号控制（概览引用：详见“信号与路口控制”） {
        相位/阶段/计划（定周期/感应/自适应）、行人相位、检测器、绿波协调、冲突矩阵、控制器接口与校验/导出。
      }
      车流微观行为 {
        跟驰模型(IDM): v0∈[12,30] m/s, a∈[1.2,2.0] m/s², b∈[1.5,2.5] m/s², T∈[0.9,1.6] s, s0∈[2,4] m；jerk限幅提升稳定性。
        换道模型(MOBIL+规则): 收益阈值Δa_thr∈[0.1,0.3] m/s²，冷却3–7 s；安全约束含相对速度与最小间距。
        随机性: 驾驶风格分布（保守/普通/激进=0.25/0.5/0.25）→映射到(v0/a/b/T/Δa_thr)。
        接近车道选择: 依据即将机动选择接近车道；设置预备换道窗口与失败重试冷却。
        外溢与阻塞: 下游无空间时禁止越过执行点；阻塞计时>τ_block(5–15 s)→对横向/对向机动施加惩罚并触发鸣笛概率。
      }
      驾驶性格建模 {
        维度: 进取性aggression、礼让courtesy、遵章obedience、注意力attention。
        参数映射: v0↑/a↑/T↓/Δa_thr↓随进取性↑；礼让↑→让行概率↑；遵章↓→闯灯/超速上限↑；注意力↓→t_react↑与近失↑。
        分布: 全局分布+分区/时段偏置；策略/执法强度可动态调整分布。
        输出: 事故风险基线与违章概率，输入事件系统权重与执法反馈。
      }
      执行点/停止线外溢与“禁止进入路口”(Gate) {
        判据: 
          信号/优先约束：绿/允许放行或黄灯“可清空”条件；
          下游空间：L_free ≥ L_min = L_vehicle + s_safe，s_safe = s0 + v*T；
          预测窗口：在t_arr内，预计释放ΔL_release（由队头出清与剩余绿推估），若L_free+ΔL_release ≥ L_min则允许进入；
          应急放宽：κ_emg∈[0.5,1.0]；行人冲突不可跳过。
        外溢与处罚:
          外溢定义：鼻端越停止线>ε_stop(0.5–1.0 m)且L_free<L_min→阻塞候选；
          超时：累积>τ_block→对冲突向施加阻塞惩罚/鸣笛压力↑/违章记录；UI显示“网格锁死”计时徽标。
        数值稳定: 相位切换前Δt_guard冻结判据；结果缓存至下一tick；接口 canEnterIntersection()/reportBlocking()。
      }
      鸣笛催促（局部行为偏置） {
        触发: 等待>τ_honk(6–15 s)或后车压力>阈值且前方存在阻塞候选；冷却Δt_cool≥20 s。
        传播: 沿同向R_lane(30–80 m)与邻道R_side≈1车道指数衰减。
        偏置: v0×(1+η_v, 3–10%)；T×(1−η_T, 5–15%)；ρ_acc小幅↑并上限夹紧；τ_decay=10–30 s。
      }
      反应时间与制动（天气/突发） {
        t_react: 保守1.2–1.6 s/普通0.8–1.2 s/激进0.6–0.9 s；突发行人/急刹→抽样尾部“惊跳”。
        b_eff = b_base×μ_weather×κ_abs；μ_weather: 干0.9/湿0.6/雪0.35/冰0.2。
        停车距离: s_stop ≈ v·t_react + v²/(2·b_eff)；若s_avail < s_stop→碰撞或低速擦碰。
        限幅: a_min ≥ −a_hard(3.5–6.0 m/s²)；尽量保持直线避免数值不稳定。
      }
      路径规划与再路由（宏观） {
        指令: 仅下发节点机动序列；宏观不关心具体车道/轨迹。
        视距: 下发前H(3–5)个路口，滚动窗口在通过后补齐，降低缓存失效。
        成本: 距离+自由流时间+拥堵+信号延误+转向惩罚；可叠加风险与事件阻抗。
        预处理: 地标/CH（可选）或分层缓存；目的地簇提升命中率。
        失效: 路段时间权重变动>±15%或封闭→失效相邻K跳；再路由冷却≥30 s。
        局部绕行: 限K跳(1–3)/距D_max(300–800 m)；奖励回归主序列的同步点；失败N次升级宏观replan。
      }
      分层路由与机动指令（握手与状态） {
        机动: {直/左/右/U/通过/停车}，绑定执行点与约束（信号/让行/禁行/时段/车辆类型）。
        状态机: planned → eligible → executing → done/cancelled；超时保留eligible或触发本地策略。
        不可达判据: 预测窗口内Gate持续false/相关边封闭/容量≈0/外溢阻塞超阈→intersectionUnreachable。
        触发与请求: rerouteRequested{reason,nextNodeId}/requestLocalDetour/forceUturnAtNearest。
        路线切换: 合法且更优时允许U形掉头回到最近同步点；上报uTurnExecuted与rerouteApplied。
      }
      停车与巡游（核心钩子，扩展详见 DLC-B） {
        选位: 多臂赌博在目的地半径内探索与利用；价格/步行/可靠性折中。
        巡游: 失败则环形/射线式搜索，设上限时耗与距离；引发次生拥堵与怠速排放。
        P+R: 远端停车+公交/轨道换乘；阈值敏感性与价格/班次影响分担率。
      }
      行人微观模拟 {
        目标与范围: 建模人行流在“人行道/广场/过街设施/站点”上的移动与过街决策；与车流/信号/事件系统双向耦合。
        网络与设施: 行人图(节点=出入口/候车区/路口角点/站台/建筑入口；边=人行道/广场连通/天桥隧道/斑马线)；与车行图在“路口/过街设施”处通过冲突/让行关系耦合；支持人行天桥/地下通道优先级与额外步行代价。
        Agent与属性: {v_pref∈[1.0,1.6] m/s, bodyRadius≈0.25–0.35 m, a_max≈1.5–3.0 m/s², perceptionRange=6–12 m, compliance∈[0,1], attention∈[0,1], groupId?}；分布受年龄/时段/天气影响。
        动力学与避让: 采用社会力(SFM)或ORCA近似做局部避碰；各向异性排斥与边界约束；急停/回避限幅，保证数值稳定；在高密度ρ→ρ_jam时切换“流体近似”降低震荡。
        速度-密度关系: 参照Weidmann曲线 v(ρ)=v0·(1−ρ/ρ_max) 的简化实现；ρ_max≈5–6 人/m²；在ρ>ρ_thr(≈3–3.5)进入拥挤状态，输出拥挤度与舒适度指标。
        过街与等待: 
          信号控制: 绑定行人相位/按钮；红灯禁止进入斑马线，黄闪/全红受“清空窗口”Gate判据；绿灯剩余时间估计不足→阻止进入，降低“路中等待”。
          无信号过街: 间隙接受(gap acceptance)；临界间隙t_c∼LogNormal(μ≈3–5 s)随compliance/队列压力调整；组团过街提升t_c需求；转向冲突(右转/掉头)依让行规则仲裁。
          二次过街: 宽路口/中央分隔带存在“庇护岛”，允许分段过街并在岛上排队；PET与TTC用于“近失”检测与UI提示。
        冲突仲裁与安全: 行人×车道/转向冲突矩阵；Gate判据扩展为 L_free 与相位+行人优先联合；指标: PET、TTC、yield率、违章率；近失/冲突事件上报incident.nearMiss{pedId, vehicleId, pet, ttc}。
        群体与编队: groupId 共享目的地与步速；编队保持松散行列与等待同伴；队列在站台/入口按容量与服务率排队，输出等候时间分布。
        路径与目的地: 多目标序列(起点→路口角点→斑马线→目的地入口)；代价=距离+拥挤惩罚+楼梯/坡道惩罚；支持“更安全路径”偏好与无障碍优先(坡道/电梯)。
        天气与设施影响: 雨雪→v_pref↓、compliance↓；积水/施工区段附加绕行成本；遮阳/雨棚/宽人行道对拥挤阈值与舒适度的正向修正。
        性能与调度: 默认5–10 Hz子步长，嵌入主tick；高密度区域触发局部子步长与群体近似；SoA布局与栅格桶邻域查询。
        接口与事件: 
          组件: Pedestrian/WalkerState/Crosswalk/Queue/Group/AmenityEntrance。
          命令: spawnPedestrian, planWalk, setCrosswalkPolicy, setPedCompliance, setPedestrianLayerVisible。
          事件: pedestrianSpawned, crosswalkQueueUpdated, pedestrianCrossStarted, pedestrianCrossFinished, nearMissPedVehicle, pedestrianArrived。
        可视化与调试: 行人实例点/简化小人；过街相位与禁止进入高亮；斑马线排队长度/等待时间热力；PET/TTC近失标注；性能叠加(行人实体数/密度网格)。
      }
    }

    信号与路口控制 {
      相位/阶段/计划：定周期/感应式/自适应（目标延误/排队最小化）。
      行人相位：行人绿灯与保护左转、行人优先策略。
      检测器：占有率/到达率/队列末端，去噪与滞后处理。
      协调与绿波：干线带速与相位偏移自动计算，质量评分可视化。
      无信号控制：停止优先、让行、环岛、四停路口。
      冲突矩阵与相位模板：构建/模板库/校验（车-车、车-人冲突），非法保存拦截。
      控制器与检测器接口：状态机、黄闪/全红/手动；API getStage/setPlan/extendGreen/callPedestrian。
      配时与协调：参数C/g/C/间隔/偏移；可视化质量评分。
      转向冲突区与行人校验：机动轨迹与包络、冲突构建、位序与让行、行人冲突与校验器与导出。
    }

    事件系统 {
      设计目标与原则 {
        可玩性：事件成为“叙事+挑战+奖励”的驱动，既制造波动也提供解法与决策空间。
        可解释：事件具明确成因/因果链/影响圈，可视化证据与复盘，避免“黑箱随机”。
        可扩展：用“数据模板+影响模型+状态机”结构化设计，易于新增类型与玩法。
        可控风险：支持难度/频率/冷却/上限/同屏限制，避免刷屏与性能抖动。
        性能友好：优先队列与空间索引用于轻量评估，重计算在Worker分层执行。
      }

      事件分类与模板 {
        类别 {
          交通类: 追尾/侧碰/交叉口冲突/多车连环/抛锚/爆胎/危险品泄漏。
          管制类: 施工/临时封闭/占道作业/交警临检/临时公交专用/大型活动(马拉松)。
          环境类: 暴雨/积水/团雾/低能见度/结冰/大风落枝/落石。
          基建类: 信号离线/检测器故障/供电中断/照明失效/可变限速与VMS异常。
          社会类: 警情/纠纷/车辆拦截/游行示威/要人通行。
          彩蛋类: 婚车车队/老爷车巡游/影视拍摄/自动驾驶测试/节日灯会。
        }
        模板字段 {
          基本: id, 名称, 类别, 严重度范围(S1-S4), 权重, 冷却, 最大并发, 可叠加性。
          触发条件[]: 时段/天气/道路等级/几何(合流/交织/弯道)/流量阈值/速度差/驾驶性格分布。
          发生策略: 泊松强度λ(t,weather,zone) 或 规则/脚本触发 或 玩家手动触发。
          影响模型: 车道封闭k条/限速v_max/通过能力下降系数α/二次事故概率β/情绪与守法偏置Δ。
          生命周期策略: 默认时长分布、升级/降级条件、阶段性释放车道、软清障是否允许。
          响应需求: 警车x/救护y/清障z/养护w、优先级、信号优先策略、预案绑定Id。
          奖惩: 预算±、声望±、成就计数、满意度影响、任务完成度与评分S/A/B/C。
          UI表征: 地图图钉/颜色/闪烁/时间轴标签/详情卡字段/回放；音效与广播文本。
        }
      }

      生成与触发 {
        驱动源 {
          随机泊松: λ_base·f(时段,天气,区域热度,流量/速度差/换道密度) 的自适应强度。
          系统触发: 仿真变量越界/健康度低/拥堵指数暴涨/排队溢出。
          叙事脚本: 场景任务/章节/教程/节日主题按进度注入。
          玩家触发: 事件卡/沙盒开关/命令面板触发器（测试与创意玩法）。
        }
        风险热力与冷却: 维护事件风险栅格与热点列表；全局与局部冷却，避免同点刷屏。
        触发器示例: “合流区且雨天且速度差>阈值”提升“追尾”触发概率。
        去重与合并: 空间邻近且时间重叠的同类事件合并为“群体事件”，降低UI噪声。
        连锁: 事故→围观减速→次事故/瓶颈外溢；施工→临时绕行→交叉口冲突上升。
      }

      生命周期与状态机 {
        状态: Created → Detected → Verified → Responding → Mitigating → Clearing → Resolved → Archived。
        字段: t_created/t_detected/t_eta/t_clear/t_resolved, severity, affectedLanes, expectedDelay, sla。
        升降级: 按影响面/持续时长/现场反馈升级(S↑)或降级(S↓)；支持“阶段性释放部分车道”。
        取消/转化: 误报→Cancelled；施工临时扩大→转化为“封闭升级”事件。
        复盘: 保留因果链、指标时间线与处置记录；支持回放与导出。
      }

      严重度与影响模型 {
        通行能力: capacity_new = capacity_base·(1 - θ_k)，θ_k 随封闭车道k与路段类型/几何而异。
        舒适与安全: 急刹/变道冲突率上升；二次事故概率β随可见度/队列尾部缓冲控制。
        行为偏置: 遵章率/礼让/情绪压力影响(v0/a/T/gapAcceptance)。
        外部性: 排放↑、噪声↑、可靠性↓、经济损失计入“城市成本/满意度”。
      }

      检测与上报 {
        传感器: 车检器/摄像头/浮动车/信号健康度；含延迟与误报/漏报率参数。
        群众上报: 附近Agent概率性上报，可信度随性格/可见度。
        融合判定: 多源一致性→Verified；低置信→Pending并设短冷却。
        定位与范围: 事件中心/受影响车道集合/影响半径，维护置信区间。
        自动关闭: 无受影响流/清障完成/到时关闭；长尾尾迹以“余阻塞”形式缓慢衰减。
      }

      响应与调度 {
        资源池 {
          种类: 警车(Police), 救护(Ambulance), 清障(Tow), 养护(Maintenance), 指挥(Ops)。
          驻点与覆盖: 按驻点分布覆盖半径与服务区域；夜间/节假日支持“缩编/值班”模式。
          值班与可用性: 班次与状态(onDuty/standby/off)，冷却与保养窗口，支持预约占用(被其他事件预分配)。
          响应时间模型: t_eta = 出警准备 + 路径行驶时间(受拥堵/封闭) + 现场汇合滞后；保留置信区间。
          能力与载荷: 救护生命支援等级、拖车吨位/挂车数、养护组人手与锥桶数；约束可服务严重度上限。
          接口: resources.list(kind, area?)、resources.reserve(eventId, kind, qty)、resources.dispatch(units, route)。
          事件: unitDispatched/unitArrived/unitBusy/unitReleased；资源不足→capacityShortage。
        }
        优先级 {
          规则: 生命 > 安全 > 效率 > 秩序；同级比较“影响面×严重度×剩余SLA”。
          可配置: 策略面板自定义权重与阈值；预设“关键走廊优先/公交可靠性保底/医院半径优先”等。
          冲突仲裁: 高优先级可抢占低优先级资源；被抢占任务进入等待或降级(允许阶段性放行)。
        }
        派遣策略 {
          触发: 进入 Verified/Responding 或升级；周期复核是否增援/重分配。
          候选生成: 过滤“可达/可用/能力匹配”的单位，最近驻点优先形成候选集。
          代价函数: cost = 距离加权 + 拥堵预测 + 任务冲突惩罚 + 违约风险；支持多目标(最小MTTA/覆盖最大化)。
          多任务与合并: 时空邻近事件合并处置；按角色(封控/清障/医疗)分配不同路径与到场顺序。
          路径规划: 结合封闭/导改避让；对应急车辆可申请“信号优先走廊/应急道”。
          队列与复核: 构建任务队列并周期复核ETA与效果；超时或效果不佳→重派。
          失败与重派: unit 堵死/故障/误派→替换候选并回收原资源；记录处置成本与学习。
          接口: dispatch.plan(eventId)、dispatch.assign(eventId, unitId[])、dispatch.reassign(eventId)。
        }
        信号优先 {
          手段: 相位插入(插入短绿清空关键入口)、延长绿(extendGreen)、清空放行(清除排队尾)、临时绿波通道(多路口偏移对齐)。
          限制: 行人安全与冲突矩阵硬约束；连续插入/延长具冷却与最大占空比，防止全网长期失衡。
          触发: 应急ETA超阈/生命类事件/疏散通道构建；退出=阶段推进或SLA满足。
          接口: signal.requestPriority(nodeId, type, window)、signal.releasePriority(id)；全量记录纳入回放。
        }
        临时组织 {
          措施: 车道封闭(全/部分)、锥桶导改(降低冲突并引导绕行)、逆向借道(限应急/低流向)、公交走应急道、禁左/禁行。
          执行: 在受影响边设置 capacity/closure/限速 标志，推送至再路由与UI；支持阶段性释放部分车道。
          可视化: 地图叠加封闭/导改样式、VMS/公告提示；时间轴标注导改启停与阶段变更。
          解除: 清场/安全评估达标后分阶段回撤；提供“软清障/阶段性放行”策略库。
          接口: events.setEdgeCapacity(edgeId, φ)、events.closeLane(edgeId, laneIdx, until)、events.setWorkZone(edgeId, {speed})。
        }
        现场处置 {
          流程: 封控→到场→救治/清障/养护→阶段性放行→彻底清场→恢复；记录 t_arr/t_clear 估计与置信区间。
          阶段性放行: 占道缩小时按“安全优先”释放1..n条车道，加速网络恢复。
          安全: 二次事故风险控制(队列尾保护/可变限速/警示灯)；危险品/低能见度附加安全缓冲。
          记录: 处置动作流水、资源用量、风险事件(近失/追尾)；纳入复盘与策略评估。
          接口: ops.reportProgress(eventId, phase, metrics)、ops.requestExtra(unitKind, qty)。
        }
        反馈回路 {
          进度采集: 现场单位上报+检测器/浮动车融合，估计影响范围/延误/ETA。
          模型更新: 实时容量φ/限速/封闭状态写回影响模型，动态更新事件阻抗与再路由代价。
          控制联动: 根据信号优先与导改效果，自动微调邻接路口配时或撤销无效优先，避免次生拥堵扩散。
          结束: 达成SLA或影响面低于阈值→Clearing/Resolved；生成复盘记录与评分；触发学习更新与预案优化。
        }
      }

      策略联动与控制 {
        再路由: 宏观代价加入“事件阻抗”，叠加VMS提示与导航建议。
        可变限速: 上/下游分段限速缓解队列尾冲击。
        匝道计量: 防止瓶颈过饱和。
        动态绿波: 为应急/疏散车辆开辟临时绿波。
        公交优先: 事件期保障线路可靠性。
        VMS与广播: 地图公告/语音提示/手机推送。
        预案库: 常见地点×类型“处置模板”一键应用。
      }

      连锁/剧情与乐趣 {
        二次事故: 队列尾/橡皮脖减速区提高近失与追尾概率。
        大型活动: 马拉松/演唱会/球赛引发区域导改与公交加班。
        天气剧情: 暴雨→积水/信号短路→多点小事故→城际分流任务。
        彩蛋: 婚车/影视拍摄/无人车测试，轻量扰动与拍照热度。
        任务链: 预警→处置→复盘三段式评分与奖励。
        难度: “写实/标准/混沌”三挡，控制频率/并发/升级概率/误报率。
        声望与预算: 快速有效处置提升声望并解锁工具；失误则扣预算与满意度。
      }

      玩家交互与事件卡 {
        事件卡: 弹出可选决策（全封闭30min/半封闭60min/绕行公交），不同决策影响评分与次生风险。
        手动派遣: 直接点选资源与路径点。
        策略开关: 区域限速/禁左/潮汐车道/绿波预案快速开关。
        公告系统: 自定义公告影响“群众遵从度”。
        沙盒注入: 测试模式注入事件/改变λ/关闭冷却用于压力测试。
      }

      UI与可视化 {
        地图标记: 事件图钉/受影响路段高亮/封闭与临时导改样式。
        详情卡: 严重度/倒计时/预计恢复/影响指标/资源ETA/决策选项。
        时间轴: 事件时间线与筛选。
        热力层: 风险热力/近失/事故密度/误报分布。
        回放: 事件回放与关键帧。
      }

      配置与数据驱动 {
        数据源: JSON/YAML事件模板与权重曲线。
        上下文权重: 时段/天气/区域/道路等级/历史事故频度。
        难度参数: 频率/并发/升级率/误报率/响应速度/资源上限。
        模组: 外部包新增事件类型与UI表现，统一注册表。
      }

      实现与性能 {
        事件总线: incident.created/updated/resolved，供UI与系统订阅。
        调度结构: 最小堆按nextTickAt推进。
        空间索引: R-Tree/网格用于邻近合并与影响圈查询。
        背压: 同屏事件与指令限额，渲染降采样与批量更新。
        可重放: 记录随机种子与事件序列，支持复现实验与对比。
      }

      测试与评估 {
        性质测试: 事件频率与分布符合期望曲线。
        蒙特卡洛: 多次随机模拟衡量稳定性与均衡。
        指标: 平均恢复时间(MTTR)/二次事故率/满意度/预算消耗/出行可靠性变化。
        A/B: 比较不同策略与预案对关键指标的提升。
      }

      示例模板 {
        高速追尾(S2): 雨天+合流区+速度差高→封闭1车道30min，需清障1台。
        信号离线(S1→S2): 高峰期交叉口检测器故障→转人工警力指挥，绿波失衡。
        马拉松(S2): 周日白天多路段分时封闭→公交加班+VMS提示+定向绕行。
        暴雨积水(S3): 低洼路段限速并可能全封→泵站出动加快排水。
        夜间施工(S1): 低峰封闭2车道→次日早高峰前必须清场，否则升级并严重扣分。
      }
    }

    基础设施老化与维护 {
      范畴：道路/桥梁/信号/检测器/公交车辆等资产引入 age 与 health∈[0,1] 属性，记录使用强度(交通量/负荷)、环境(天气/盐雾)与维修历史。
      衰减模型：health_t+Δ = health_t − f(usage, age, weather, quality)·Δt；健康度下降映射为性能退化(例如 v_max↓、路面舒适度↓、信号故障率↑)；支持资产等级与材料参数。
      维护策略：预防性(PM)与纠正性(CM)并存；生成维护工单(work order)并调度养护资源(参考事件系统资源池)；可阶段性封闭/降速/借道；预算与优先级基于“影响面×风险×SLA”。
      事件联动：当health低于阈值或故障概率升高时注入“养护/故障/短时离线/软清障”类事件；施工阶段对容量/限速/相位做临时调整；完工触发缓慢恢复曲线。
      接口：asset.setPolicy(kind,{pmInterval, budget, thresholds})、asset.healthAt(id)、maintenance.schedule(assetId, window, scope)、maintenance.cancel(orderId)；事件 maintenanceScheduled/started/paused/completed/overdue。
      可视化与UI：资产健康度热力/年龄分布、工单甘特/日历、预算使用率、SLA违约提示；地图显示施工/封闭与预计恢复时间。
      性能与调度：默认以“天”为步进批量更新health，按tile增量；与时间与调度系统一致，确保可重放与一致性。
    }

    物理与渲染体系 {
      车辆物理 {
        模型层级 {
          Level 0（准微观）: 远距/低关注，积分速度与位置；受信号/队列边界与IDM近似约束。
          Level 1（微观纵向）: IDM纵向+简化横向；默认多数车辆。
          Level 2（细化交互）: 拥堵/交织口/事件附近启用更细子步长与严密碰撞；动态升级/降级。
        }
        纵向动力学与限制 {
          a ∈ [−a_hard, +a_max]；b_comfort限制舒适减速；jerk限幅提升观感。
          速度上限: min(道路限速×遵章度偏置, 车辆v0)；坡度/施工/工作区附加限速。
          反应时间: t_react按性格/情绪/天气抽样；事件期上调并可能触尾部“惊跳”。
        }
        转向与几何一致性 {
          轨迹: 车道中心线+转向机动样条；曲率热点自动降速(κ=1/R)。
          转弯半径门槛: 按道路类型/限速映射R_min；超限提示“降速/插入过渡段”。
          视觉一致: 渲染几何与模拟抽稀采样表共用弧长s，避免错位。
        }
        碰撞与接触 {
          检测: AABB为主，执行点/冲突区附近启用OBB细化。
          响应: 低速擦碰→速度夹紧与侧向抖动；中/高速→事故事件（占道/清障/封闭时长）。
          守恒近似: 仅用于严重度等级；不做弹性解，重在稳定与可玩。
        }
        轮胎-路面与天气 {
          μ: 干/湿/雪/冰；影响b_eff与可用加速度；工作区追加减速。
          水膜/积雪: 区段标志位触发“打滑概率↑/b_eff↓”，与事故风险挂钩。
        }
        反馈与动画 {
          灯态: 刹车/转向/倒车灯；公交/应急专用灯态。
          车身微摆: 随速度/横向偏移生成轻微俯仰/侧倾（屏幕空间）。
          粒子: 排气/热浪/起步烟尘/火花与事故烟；按性能预算自适应。
        }
        参数与接口 {
          默认建议: v0=12–30 m/s, a_max=1.8±0.3, b_comfort=1.5–2.5, a_hard=3.5–6.0, T=0.9–1.6;
          天气映射: μ_weather{dry:0.9, wet:0.6, snow:0.35, ice:0.2}；κ_abs≈1.0。
          API: setPhysicsDetail(level), setWeather(kind), setFrictionPreset(preset), setVehicleLights(enabled)。
        }
      }
      渲染管线与技术栈 {
        场景分层: 底图/地形 → 道路/车道与标线 → 建筑/地块 → 车辆/行人/附件 → 粒子/特效 → Debug/UI叠加。
        实例化与批处理: 车辆/路标/路灯实例化；共享VBO与每实例属性；车道与标线采用带状几何，远处抽稀为“车流条纹”。
        光照与时间: 日夜循环(太阳高度/色温)；夜间路灯/车灯“照明带”；动态天气（雨/雪/雾）粒子与屏幕后期。
        特效与后处理: 色调映射、景深拟态(倾斜移轴/暗角)、高速镜头轻微动感模糊（低配可关）。
        相机与镜头: 俯视/跟车/自由；跟车镜头具缓动与预判视界；事件镜头戏剧化（可关）；回放轨迹与时间倒回/分屏对比。
        声音与空间化(可选): 引擎与轮噪；鸣笛/警笛空间化与衰减；与“鸣笛/应急优先”联动。
        性能与降级: 主线程绘制≤4 ms/帧；粒子≤1 ms；后处理≤0.8 ms；LOD抽稀/热力降分辨率/相机降刷新逐级降级。
        样式系统: style.json 声明颜色/粗细/标线/灯态调色板；明/暗/色盲友好主题。
        配置: graphics.config.json {lod, particles, postfx, theme, camera, eventCinemachine}；热更新并持久化。
      }
      可玩性与反馈钩子 {
        自动慢放触发、关键时刻镜头、近失/礼让提示与成就；照片模式与车灯轨迹长曝光。
      }
      调试与诊断可视化 {
        叠加: AABB/OBB/接触点、Gate、速度/加速度、曲率热点、LOD网格、粒子预算。
        计时: 每帧绘制耗时分解/顶点与实例计数；热键切换与截图；导出回归比对与报警。
      }
    }

    玩家交互与UI {
      目标与原则 {
        低占用/高信息密度；一致操作模型（选择→命令→反馈）；可撤销；键鼠友好与可触控；信息层级清晰。
      }
      界面框架与布局 {
        顶栏: 场景/存档、撤销/重做、模式切换、搜索/命令面板、全局设置。
        左侧工具栏: 道路/分区/推土机/选择/测量/曲线编辑等，长按二级菜单。
        右侧面板区: 属性检查器、统计/诊断、路口/信号编辑器、图层管理；可折叠与标签切换。
        底栏: 时间控制(暂停/1x/2x/4x/8x)、时间轴事件标记、性能指标(FPS/Agent数)。
        中央画布: 拾取/平移/缩放/框选/就地编辑；小地图与相机预设；布局持久化。
      }
      模式与选择 {
        模式: 道路/分区/推土机/选择/测量/信号编辑/块与附件。
        选择: 单选/多选/框选；选择相似；区域过滤（类型/属性）；图层可选性与“优先策略”（较新编辑/优先道路/优先节点）。
        反馈: 悬浮预览（道路几何/成本/合法性）、吸附与约束图标、错误/冲突高亮与修复建议。
        撤销/重做: 原子命令与组合命令；跨面板一致回退。
      }
      数据流与状态 {
        单向数据流: UI→命令/意图→核心（ECS/Worker）→事件/快照→UI。
        状态分层: 全局(设置/主题/快捷键)/场景(地图/图层/布局)/临时(悬浮/选择/拖拽)。
        命令系统: 不可变数据与差分快照；批量操作与进度反馈。
        事件总线: 主线程与Worker消息分派/节流/背压；UI只订阅精选指标与告警。
      }
      可视化图层 {
        基础: 网格、地形、道路/车道、建筑/地块、过街与标线。
        分析: 速度/流量/排队热力、相位利用率、事故与封闭、OD 流与等时圈。
        调试: 节点/边 ID、车道索引、冲突区/合流、路径与机动序列回放。
        管理: 图层开关、透明度、渲染顺序、采样窗口、空间过滤（视野/区域/类型）。
      }
      面板与仪表 {
        属性检查器: 实体（道路/节点/相位/地块/车辆）关键字段；批量编辑与校验。
        统计面板: 人口/车辆/模式分担率、平均旅行时间、延误、可靠性、近失、碳排；支持时间序列与导出。
        Agent追踪: 路径/机动序列/约束与延误分解；固定追踪与两车对比。
        路口控制: 相位/阶段/配时编辑、检测器与优先策略，队列推进预演与冲突检查。
      }
      通用组件与交互 {
        表单: 数字/单位输入(限速/周期)、区间滑条、颜色选择器、开关/单/多选，支持键盘操作与校验。
        快捷键/命令面板: 可视化Cheatsheet；自定义映射导入/导出；冲突自动建议修正。
        搜索与跳转: 名称/ID/属性定位实体；“跳到下一个瓶颈/事故/过饱和路口”。
        新手引导: 任务式分层教程；随时可打开帮助与示例工程。
      }
      响应式与国际化 {
        布局自适应: 侧栏可停靠/悬浮；小屏保留核心工具与时间控制。
        主题与无障碍: 明/暗色、色盲友好调色板、字号缩放、对比度与键盘可达性。
        i18n: 文案键值化与按需加载；数值/单位/日期本地化与公英制切换。
      }
      性能与异步 {
        UI虚拟化: 列表/树/时间序列按需渲染；面板惰性挂载与后台暂停更新。
        解耦: 指标聚合与降采样；跨线程消息批量合并、节流/防抖。
        故障保护: Worker崩溃/超时重启与快照恢复；非阻塞通知与错误上报。
      }
      可扩展性 {
        插件面板位: 允许第三方添加面板/图层/工具按钮，声明权限与资源配额。
        自定义图层: 通过脚本API订阅数据与绘制回调；统一样式与图例系统。
        布局预设与分享: 导出当前面板布局与图层配置，便于复盘与协作。
      }
      建造工具 {
        道路工具: 绘制/升级/拆除；曲线与立交；车道数/限速/方向；所见即所得合法性。
        转向编辑: 入口×车道设置允许机动(L/T/R/U)；几何推断默认值与冲突校验。
        路口配置: 斑马线连通、相位/配时编辑、检测器安放与绑定、优先策略。
        区域规划: 笔刷式填充住宅/商业/办公区；权重与强度；合法性提示。
        推土机: 清理地块与建筑；支持区域选择与撤销。
        块与附件: 放置/旋转矩形块，吸附/对齐与合法性预览；附件锚点吸附；自动连接与冲突提示。
        道路曲线编辑 {
          控制点与样条: 三次Bezier/B样条；手柄对称/非对称、等长/自由；C0/C1/C2约束切换。
          操作: 添加/删除/拆分段、拖拽、数值输入；吸附到网格/角度/端点/切线；沿切线移动/法向偏移与多选对齐。
          采样: 弧长参数化与按曲率自适应细分；显示曲率热点与半径指示。
          校验: R_min与κ_max=1/R_min越界高亮（红/橙），提示修复（增大半径/缓和曲线/降限速）。
          默认映射: 20→8 m, 30→15 m, 40→25 m, 50→40 m, 60→70 m（可配置）。
          自动修正: 一键圆角/缓和（Clothoid近似）；最小扰动更新；输出差分与缓存失效。
        }
      }
      信息与数据可视化 {
        交通流量图层：绿/黄/红；可叠加等值线与流向箭头；时间窗口与空间过滤。
        Agent追踪：车辆/居民状态、目的地与路径；效用/约束分解；导出追踪报告。
        城市统计：人口、就业率、交通效率、碳排等；支持导出CSV/Parquet。
      }
      时间控制 {
        档位：暂停/正常/快速/超快速；“自动慢放”开关与阈值配置。
      }
      命令面板与快捷操作增强 {
        模糊搜索与自然语言：拼音/别名匹配；自然语言解析日志可回放与撤销审计。
        最近/收藏/历史：参数预设与“一键重做”。
        宏与批处理：录制操作序列成宏；占位符参数与回放前预览影响范围。
        多步预览：执行前显示“影响对象计数/合法性/潜在冲突”；不通过给出修复建议。
        权限与预算：插件命令显示权限来源与资源预算。
      }
      画布交互与手势 {
        平移/缩放：滚轮以指针为中心；Alt为“语义缩放”（优先选中对象）。
        径向菜单：Space/长按打开，展示最相关5–8个操作与当前状态。
        吸附切换：按住Shift取消吸附；Alt切换角度吸附；状态栏显示当前规则。
        批量选择与过滤：框选后按类型/属性过滤；展示计数与示例。
        就地数值编辑：在画布直接拖拽编辑限速/半径/长度；弹出数值输入与单位转换。
      }
      智能助手与预测预览 {
        建议卡：如“建议右转口袋+15 m”，一键应用并可撤销。
        指标Δ预估：编辑预览时显示对延误/排队/可靠性/碳排的即时影响（快速近似模型）。
        方案对比：加入“比较篮”形成A/B；时间轴分屏回放差异。
        风险提醒：潜在网格锁死/冲突/半径或净空不足定位与一键修复入口。
      }
      教学/挑战/趣味化 {
        引导任务：新手→进阶→高手，按步骤仅展示相关UI；失败显示原因与提示。
        挑战卡：时限目标与评分（S/A/B/C），支持复盘与自动分享图。
        成就：解锁干线/绿波/事故零发生等，授予徽章与主题皮肤。
        叙事事件UI：重要事件以气泡/播报条/镜头强调呈现，可点击跳转处置。
      }
      通知与告警中心 {
        层级：Info/Warning/Critical；相近事件合并/折叠；静音时段与勿扰。
        行动化：通知内含“跳转/预览/一键修复/忽略/屏蔽此类”。
        来源与追踪：标注来源（系统/插件/AI/玩家）；溯源与影响面查看。
      }
      录制·回放与分享工作室（概览，扩展详见 DLC-L） {
        片段标注：时间轴书签与字幕；自动抓取关键帧（事故/阈值越界）。
        导出预设：短视频比例与水印；导出GIF/MP4/JSON回放索引。
        摄影机脚本：关键帧插值+镜头脚本；跟车与戏剧化镜头模板；路径可视化。
        分享链接：场景快照+回放索引的只读分享。
      }
      自定义与无障碍增强 {
        HUD密度（紧凑/标准/宽松）与主题色；色盲模拟与安全调色板。
        可见性：轮廓高亮/放大镜/高对比；朗读与焦点导航。
        单位与格式：公英制切换、时速/时耗格式、坐标与方位显示可配置。
      }
      输入设备与控制支持 {
        手柄：导航/缩放/径向菜单/常用建造；震动反馈（可关）。
        触控：双指缩放/长按径向/三指撤销；边缘滑出召回面板。
        平台适配：小屏“工具浮岛”模式与最小触点尺寸保障。
      }
      性能与诊断 UI {
        预算可视：右下角渲染/模拟/粒子预算条；超限高亮与降级建议。
        线程健康：Worker心跳/消息队列长度/丢帧计数；异常重启与日志导出。
        调优向导：定位最重图层与热点区域；一键关闭/降级开关。
      }
    }

    数据契约与消息协议 {
      ECS 组件清单 {
        Transform、Vehicle、LaneFollower、TrafficSignal、Detector、Lot/Parcel、Building、Household、Resident、JobSlot、Employer、ParkingFacility、Schedule、VehicleEnergy、FuelStation、ChargingStation、Dealership、RentalAgency、PropertyUnit、Tenancy、HouseholdInventory、RetailOutlet、ShoppingList。
      }
      标识与索引：ID策略（32位分段编码）；空间索引：tile→entityId[]。
      主线程⇄Worker 消息总线：通道、模式（命令/事件/快照/RPC）、频率与背压。
      命令与事件模式：
        命令：placeRoad, setSignalPlan, startSim, pause, setPolicy, zoneArea, synthesizeBuildings, setBuildingPolicy, allocateHouseholds, allocateJobs, allocateParking, hire, onboard, resign, takeLeave, emergencyLeave, buyCar, sellCar, rentCar, returnCar, buyHouse, rentHouse, endLease, transferOwnership, bookCharging, bookRefuel, updateInventoryPolicy, generateShoppingList, purchaseItems, restockStore, trackVehicle, rerouteVehicle, forceUturn, setVehicleStyle, injectMission, setConvoy。
        事件：vehicleSpawned, queueUpdated, signalChanged, incidentCreated, energyLow, refuelQueued, refuelStarted, refuelFinished, chargeQueued, chargeStarted, chargeFinished, purchaseCompleted, leaseSigned, leaseTerminated, inventoryLow, shoppingPlanned, shoppingStarted, shoppingFinished, storeRestocked, stockOut, nearMiss, honk, intersectionUnreachable, rerouteRequested, rerouteApplied, uTurnExecuted。
        序列化：JSON + 二进制缓冲与schema版本。
    }

    性能与多尺度 {
      时间推进 {
        固定步长微观（dt=0.25~0.5 s）+ 事件驱动（信号切换/事故）混合；远距/低关注区域采用准微观“管道队列”。
      }
      数据布局与并行 {
        ECS: SoA/TypedArray；位置/速度/加速度/车道索引等紧凑布局。
        Worker分区: 渲染主线程；模拟与寻路在Worker/OffscreenCanvas；可选WASM。
        空间索引: R-Tree/网格桶用于邻域查询、拾取与热力抽样。
      }
      渲染优化 {
        WebGL/WebGPU实例化；LOD/聚合点显示降低overdraw；屏幕空间栅格热力。
      }
      性能预算与规模目标 {
        规模: 2–5万车辆、1–3千节点、3–8千边；UI 60 FPS；模拟 10–20 Hz。
        CPU: 主线程≤4 ms/帧；Worker每tick≤15–30 ms。
        内存: 活动车辆≤150 MB；路网≤50 MB；热力栅格与回放索引受分辨率控制。
        批处理: 物理/AI批量更新；路径求解批队列+时间片；指标1–2 Hz聚合。
      }
      Tick 调度 {
        阶段顺序与“时间与调度系统/调度阶段顺序”一致；子步长≤3；跨分区边界队列；背压触发降级阶梯。
      }
    }

    地图与数据（工程流） {
      地图来源与导入：内置编辑器绘制；可选OSM轻量导入（道路/限制/POI），自动简化与纠错；瓦片化加载策略。
      路网结构：节点/边/车道三层，转向关系与冲突矩阵预编译；几何折线/曲线 → 车道中心线与边界；
      构图与增量同步：来源于道路块连接器自动构建；连续同向段合并；宽度/类型变化或交汇处生成节点；入口索引；增量更新保持ID稳定并发出拓扑变更事件。
    }

    校准与验证 {
      指标匹配：基线流量/速度分布/出行分担率与目标城市数据对齐。
      参数寻优：网格搜索/贝叶斯优化对关键参数（IDM、Logit）标定。
      可重复性：固定随机种子、版本化参数集与数据快照。
      基准场景与测试：小型格网城/十字路口/干线走廊；稳态流量-速度曲线与相位变更影响；提交跑回归门限。
    }

    风险与对策 {
      性能瓶颈：寻路与邻域查询 → 缓存/分层/批处理与Worker。
      行为震荡：过度再路由 → 冷却时间与成本滞后。
      复杂度上升：模块膨胀 → 明确接口与分层，强约束数据契约。
      可用性：编辑器学习曲线 → 模板/引导/可撤销与历史记录。
    }

    术语表 {
      IDM: Intelligent Driver Model 跟车模型；
      MOBIL: Minimizing Overall Braking Induced by Lane changes 换道判据；
      CH: Contraction Hierarchies 图预处理加速最短路；
      LOD: Level of Detail 细节层级。
    }
  }

  DLC 扩展卷索引与全文 {
    DLC-A 公共交通 {
      公交系统 {
        线路编辑器: 站点/线路/班次/发车间隔；支持工作日/周末/节假日差分时刻表。
        运营要素: 车型与容量、加密/缩减、夜班线、定制线路、换乘优惠与价格策略。
        停站与拥挤: 停站时间 = 基础t0 + α_board×上车人数 + β_alight×下车人数；拥挤惩罚对上车概率与舒适度影响。
        专用设施: 港湾式停靠、专用道、BRT 与越行道；站台拥挤→上车失败与等待增长。
      }
      轨道/地铁 {
        施工期: 临时封路与绕行；施工期结束自动恢复。
        运营优势: 高容量与高时效；站点吸引半径、换乘惩罚、站内步行时间；列车编组与发车间隔。
      }
      骑行与步行 {
        骑行道网络/步行街区/过街设施；等时圈显示生活圈半径；骑行停车与共享单车调度、丢失/调配成本。
      }
      网约车/出租与微出行 {
        动态定价与空驶率模型；上下客路权与路侧管理；对拥堵与公交分担率的交互作用。
      }
      运营机制 {
        多时段班次: 早高峰/平峰/晚高峰；发车间隔扰动与可靠性。
        容量与拥挤惩罚: 乘客效用随拥挤递减；溢出乘客进入下一班或改乘其他方式。
        换乘惩罚: 罚时+步行时间+站内换乘距离；可用“无缝换乘”设施降低惩罚。
        优先权: 车道/信号优先（BRT/公交优先相位）；与“信号优先”接口互通。
      }
      注释 { 出行方式分担率由“需求/模式划分”驱动，与价格/时间/可靠性/政策参数联动。 }
    }

    DLC-B 停车与物流系统 {
      停车管理 {
        资源: 路侧/停车场/居住配建/共享位；价格与时限/许可；路侧配额与政策。
        选择: 目的地半径内多臂赌博探索-利用；价格/步行/可靠性折中；失败概率与巡游阈值。
        巡游模型: 射线式/环形搜索，限制最大距离与时耗；次生拥堵与怠速排放纳入指标。
        P+R: 远端停车+公交/轨道；价格/班次/可靠性影响分担率；引导标识与预订。
      }
      城市物流与配送 {
        设施: 仓库/分拨/自提柜；时间窗/禁行/限重与路线限制。
        调度: 近似VRP；装卸区与路侧资源竞争；高峰时段抑制与错峰策略。
        影响: 商业区运行效率与路段占用；与事件系统“占道作业”联动。
      }
      城市服务车辆 {
        类型: 垃圾清运/环卫/救护/消防/工程；优先级与特殊规则；
        接口: 与“信号优先/资源池/派遣”互通，实现统一调度。
      }
    }

    DLC-C 环境与天气与能耗 {
      天气影响：雨雪/大雾/热浪对事故、车速、出行偏好与公交准点率。
      环境指标：PM2.5/噪声/碳排热力；绿化与慢行网络缓解；低排放区与拥堵费对选择与负载影响。
      突发灾害与疏散：暴雨内涝/道路封闭/大型活动的潮汐流与应急预案。
      能耗与排放：速度/加速度段排放因子CO2/NOx/PM；噪声估计；低排放区策略。
    }

    DLC-D 电动车与充电 {
      能耗与里程 {
        SOC模型: 行程能耗与再生制动；空调/加热修正；滚动平均估计续航，安全缓冲ε_soc=5–15%。
      }
      站点与排队 {
        属性: 站点类型(枢纽/目的地/路侧慢充)、功率kW、接口(CCS/GB/T)、并发数c、占用率、开放时段。
        排队: M/M/c或有界队列；到达率由区域EV需求与价格驱动；服务时间=基础+ΔSOC/功率×效率。
        预约与排序: 支持预约；到站按优先级(剩余SOC/会员/紧急)排序；超时放弃与再搜索。
        失败路径: 队列超阈或断供→改站/改时段/改充电策略或改乘方式。
      }
      定价与策略 {
        分时电价/会员价/峰谷套利；目标SOC/充满/补电策略；目的地充电 vs 途中补能。
      }
      行为与路径 {
        充电作为插入式停靠点影响OD与总时耗；与再路由/事件封闭联动；若队列波动大→增加不确定性权重。
      }
    }

    DLC-E 燃油与加油站 {
      能耗模型：L/100km 随速度/加速度/拥堵/空调负载修正；备用油箱警戒线fuel_low。
      加油站属性：油枪数c、等级、油价、服务效率；队列与服务时间分布。
      行为策略：触发/选站/失败（改站/降油号/紧急拖车）。
      定价与政策：地区差价、限供、临时涨价事件。
    }

    DLC-F 车辆市场（4S/二手/租赁） {
      4S店与库存：车型/动力/价格/等待期；试驾与交付时延。
      二手交易：车龄/里程/折旧与品质评分；挂牌→成交流程。
      租赁与共享：车队与站点、计费、预订与取还、运营调度与补能、高峰加价与缺车告警。
      居民行为：无车或临时需求→租车；购车/卖车决策受收入/通勤成本/政策补贴影响。
    }

    DLC-G 住房市场与租赁/归属 {
      户型与单元：PropertyUnit；产权与租赁（Tenancy）；归属homeUnitId 影响通勤OD与满意度。
      定价与匹配：区位/通达性/环境/供需与政策；匹配算法按预算/偏好/通勤成本择优。
      搬迁与流动：就业变更/家庭事件/租约到期/满意度驱动搬家；执行“迁居”OD并重分配学校/岗位/停车。
    }

    DLC-H 政策与条例系统 {
      路权与限速：车道用途分配、公交优先、货车/网约车管理、校区慢行安全区。
      价格与管制：拥堵定价、停车定价、单双号/拍牌、低排放区与超限处罚。
      信号策略：自适应配时、绿波带、行人优先、保护左转；目标导向优化。
      执法与合规：电子警察覆盖率与处罚力度影响违规率与系统均衡。
    }

    DLC-I 市民满意度与人口动态 {
      满意度维度：通勤时长/可靠性/安全/环境/生活成本/公共服务可达性。
      人口与职住平衡：迁入迁出、土地价值与产业布局反馈；动态职住平衡演化。
      公平与可达性：弱势群体出行指标纳入整体评分。
    }

    DLC-J 可视化与分析增强 {
      高级图层：OD流线/弦图、等时圈、延误与拥堵热力、换乘惩罚热图、碳排分布。
      路口诊断：饱和度、排队长度、相位利用率、冲突热点与碰撞黑点。
      回放与对比：干预前后A/B对比、时间线事件标记、关键指标分屏对照与报表。
      车道级与时序增强：车道级饱和度/排队/相位利用率；OD流/等时圈/拥堵波回放；策略A/B快照分屏对照。
    }

    DLC-K 模组与创意工坊 {
      资产与地图：建筑/车辆/道路预制件与地形地图导入导出与分享。
      规则与脚本：TypeScript 安全沙盒扩展事件/政策/图层与UI；
      数据接口：CSV/JSON 导入导出；社区与评分与订阅机制；
      插件与脚本API：能力边界、版本与兼容、生命周期与Hook（onLoad/onEnable/onDisable/onTick/onMessage）、资源限额、数据订阅与绘制（subscribe/subscribeMetric/registerLayer）、安全与权限（读/写白名单、Worker隔离、超时与内存上限）。
    }

    DLC-L 数据与复盘工作室 {
      导入导出 {
        指标导出: CSV(长表/窄表)/Parquet(可选)，含units与元数据(版本/seed/场景)。
        场景快照: JSON+二进制分块(道路几何/车道中心线等)；schema带version，含迁移脚本。
        分享: 生成只读链接（本地/云端）；可附回放索引。
      }
      录制与回放 {
        确定性: 固定随机种子+子流；记录外部输入与随机流消费计数。
        关键帧: 每N秒保存关键帧+差分事件日志；快进与跳转；分屏对比(A/B)。
        事件标记: 事故/拥堵/信号改动/策略切换；检索与筛选。
      }
      Schema 要点 {
        指标: {ts, metricName, value, unit, window, tags{tile/edge/node/phase/vehicle}}。
        路网: {nodes[], edges[], lanes[], turns[], conflicts[], signals[]} 分块与版本。
        Agent追踪: {vehicleId, maneuvers[], delaysBreakdown, nearMiss[], honkCount}。
      }
      可重复性与版本 {
        语义化版本；跨版本迁移脚本；超过阈值自动提示与备份。
      }
    }
  }
}


